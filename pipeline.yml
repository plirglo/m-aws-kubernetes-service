trigger:
  branches:
    include:
      - develop
      - master
pr:
  branches:
    include:
      - master
      - develop

pool:
  name: $(poolName)

jobs:
  - job: Test
    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.7'
        inputs:
          versionSpec: '3.7'
          addToPath: true
      - task: CmdLine@2
        displayName: 'Install Dependencies'
        inputs:
          script: |
            # add-apt-repository ppa:deadsnakes/ppa -y
            # apt update
            # apt-get install -y --no-install-recommends python3.7
            # python3 -m pip install yt
            # apt-get install -y wget make ssh curl bc
      - task: GoTool@0
        displayName: 'Install GO'
        inputs:
          version: '1.15.2'
      - task: Go@0
        displayName: 'Get go-junit-report plugin'
        inputs:
          command: 'get'
          arguments: '-u github.com/jstemmer/go-junit-report'
      - task: Bash@3
        displayName: 'Set Build Variables'
        inputs:
          targetType: 'inline'
          script: |
            echo "##vso[task.setvariable variable=MAJOR_VERSION]$(make print-VERSION)"
            echo "##vso[task.setvariable variable=REPOSITORY_NAME]$(make print-USER)"
            echo "##vso[task.setvariable variable=IMAGE_NAME]$(make print-IMAGE)"
            echo "##vso[task.setvariable variable=PATH]$(echo $GOPATH:$GOBIN:$PATH)"
      - task: Bash@3
        displayName: 'Run Tests'
        inputs:
          targetType: 'inline'
          script: |
            cd $WORK_DIR
            echo "Start make test"
            make test
          failOnStderr: true
        env:
          CLIENT_SECRET: $(clientSecret)
          WORK_DIR: $(System.DefaultWorkingDirectory)
          K8S_HOST_PATH: "/tmp/tests-share/$(IMAGE_NAME)"
          K8S_VOL_PATH: "/tests-share/$(IMAGE_NAME)"
          AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
          AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      - task: CmdLine@2
        displayName: 'Cleanup Local Image'
        inputs:
          script: |
            echo "Removing image"
            echo "---------------------------------------------------------------"
            docker rmi $(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION) --force
      - task: PublishTestResults@2
        displayName: 'Publish Test Results report.xml'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'report.xml'
          searchFolder: '$(k8s_vol_path)/$(IMAGE_NAME)/'
          publishRunAttachments: true
          failTaskOnFailedTests: true
  - job: Publish
    dependsOn: Test
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/develop'))
    steps:
      - task: Bash@3
        displayName: 'Set Build Variables'
        inputs:
          targetType: 'inline'
          script: |
            echo "##vso[task.setvariable variable=MAJOR_VERSION]$(make print-VERSION)"
            echo "##vso[task.setvariable variable=REPOSITORY_NAME]$(make print-USER)"
            echo "##vso[task.setvariable variable=IMAGE_NAME]$(make print-IMAGE)"
      - task: Bash@3
        displayName: 'Print Variables'
        inputs:
          targetType: 'inline'
          script: |
            echo "MAJOR_VERSION: $(MAJOR_VERSION)"
            echo "REPOSITORY_NAME: $(REPOSITORY_NAME)"
            echo "IMAGE_NAME: $(IMAGE_NAME)"
            echo "Build.BuildId: $(Build.BuildId)"
      - task: Docker@2
        displayName: 'Build and Push Image'
        inputs:
          containerRegistry: $(registry_name)
          command: buildAndPush
          repository: $(REPOSITORY_NAME)/$(IMAGE_NAME)
          tags: $(MAJOR_VERSION).$(Build.BuildId)
          Dockerfile: $(System.DefaultWorkingDirectory)/Dockerfile
          buildContext: $(System.DefaultWorkingDirectory)
      - task: CmdLine@2
        displayName: 'Cleanup Local Image'
        inputs:
          script: |
            echo "Removing image"
            echo "---------------------------------------------------------------"
            docker rmi $(registry_name)/$(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION).$(Build.BuildId)